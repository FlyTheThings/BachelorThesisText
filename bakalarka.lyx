#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrreprt
\begin_preamble
%<-------------------------------společná nastavení------------------------------>
\usepackage[numbers,sort&compress]{natbib} %balíček pro citace literatury  
\usepackage{algorithmic}
\usepackage{color}%kvůli barvám ČVUT
\newcommand{\BibTeX}{{\sc Bib}\TeX}%BibTeX logo
\usepackage{multicol}
\usepackage[overload]{textcase}



%<-----------------------------volání stylů----------------------------------------->
% (znak % je označení komentáře: co je za ním, není aktivní)

%<--------matematické písmo--------------------------------------->

%\usepackage[helvet]{packages/sfmath}%matematika ala helvetica



%<------------------------------záhlaví stránek------------------------------------>
%\usepackage{packages/bc-headings}
\usepackage{packages/bc-fancyhdr}

%<------------------------------hlavičky kapitol------------------------------------>
%\usepackage{packages/bc-neueskapitel}
\usepackage{packages/bc-fancychap}
\end_preamble
\options cleardoublepage=empty,BCOR15mm,DIV12
\use_default_options false
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman tgtermes
\font_sans tgheros
\font_typewriter tgcursor
\font_math newtxmath
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style 
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\begin_inset VSpace 10mm
\end_inset


\end_layout

\begin_layout Standard

\family sans
\shape smallcaps
\size largest
\noun on
Czech Technical University in Prague
\family default
\shape default
\size default
\noun default

\begin_inset Newline newline
\end_inset


\begin_inset VSpace 0.5em
\end_inset


\family sans
\shape smallcaps
\size largest
\noun on
Faculty of Electrical Engineering
\family default
\shape default
\size default
\noun default

\begin_inset Newline newline
\end_inset


\begin_inset VSpace 1em*
\end_inset


\family sans
\shape smallcaps
\size larger
\noun on
Department of Cybernetics
\family default
\shape default
\size default
\noun default

\begin_inset VSpace 15mm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename obrazky/lev.png
	lyxscale 50
	width 30text%

\end_inset


\begin_inset VSpace 15mm
\end_inset


\end_layout

\begin_layout Standard

\family sans
\size huge
BACHELOR THESIS
\end_layout

\begin_layout Standard
\begin_inset VSpace 15mm
\end_inset


\end_layout

\begin_layout Standard

\family sans
\size largest
RRT-path method used for cooperative surveillance by group of helicopters
\end_layout

\begin_layout Standard
\begin_inset VSpace 10mm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill*
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 10mm
\end_inset


\end_layout

\begin_layout Description
\noindent
\align block

\size large
Author: 
\family sans
Matěj Račinský
\end_layout

\begin_layout Description
\noindent
\align block

\size large
Thesis
\begin_inset space ~
\end_inset

supervisor: 
\family sans
Dr.
 Martin Saska
\family default

\begin_inset space \hfill{}
\end_inset


\family sans
In Prague,
\family default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
the
\backslash
year % nebo doplňte rok vzniku vaší bakalářské práce
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard

\size small
\begin_inset Note Note
status open

\begin_layout Plain Layout

\size small
Anotace
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{plain}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{
\end_layout

\end_inset

Abstrakt
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\noindent

\size small
\begin_inset space ~
\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Description
\noindent

\size small
Název
\begin_inset space ~
\end_inset

práce: Aplikace algoritmu RRT-path v úloze autonomního dohledu skupinou
 helikoptér
\end_layout

\begin_layout Description
\noindent

\size small
Autor: Matěj Račinský
\end_layout

\begin_layout Description
\noindent

\size small
Katedra
\begin_inset space ~
\end_inset

(ústav):
\size default
 Kate
\size small
dra kybernetiky
\end_layout

\begin_layout Description
\noindent

\size small
Vedoucí
\begin_inset space ~
\end_inset

bakalářské
\begin_inset space ~
\end_inset

práce: 
\size default
Dr.
 Martin Saska
\end_layout

\begin_layout Description
\noindent

\size small
e-mail
\begin_inset space ~
\end_inset

vedoucího: saska@labe.felk.cvut.cz
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Description
\noindent

\size small
Abstrakt V předložené práci studujeme...
 Uvede se abstrakt v rozsahu 80 až 200 slov.
 Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
 Ut sit amet sem.
 Mauris nec turpis ac sem mollis pretium.
 Suspendisse neque massa, suscipit id, dictum in, porta at, quam.
 Nunc suscipit, pede vel elementum pretium, nisl urna sodales velit, sit
 amet auctor elit quam id tellus.
 Nullam sollicitudin.
\end_layout

\begin_layout Description
\noindent

\size small
Klíčová
\begin_inset space ~
\end_inset

slova: klíčová slova (3 až 5)
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Description
\noindent

\size small
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100line%"
height "1pt"

\end_inset


\end_layout

\begin_layout Description
\noindent

\size small
Title: RRT-path method used for cooperative surveillance by group of helicopters
\end_layout

\begin_layout Description
\noindent

\size small
Author: Matěj Račinský
\end_layout

\begin_layout Description
\noindent

\size small
Department: Department of Cybernetics
\end_layout

\begin_layout Description
\noindent

\size small
Supervisor: 
\size default
Dr.
 Martin Saska
\end_layout

\begin_layout Description
\noindent

\size small
Supervisor's
\begin_inset space ~
\end_inset

e-mail
\begin_inset space ~
\end_inset

address: saska@labe.felk.cvut.cz
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Description
\noindent

\size small
Abstract In the present work we study ...
 Uvede se anglický abstrakt v rozsahu 80 až 200 slov.
 Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
 Ut sit amet sem.
 Mauris nec turpis ac sem mollis pretium.
 Suspendisse neque massa, suscipit id, dictum in, porta at, quam.
 Nunc suscipit, pede vel elementum pretium, nisl urna sodales velit, sit
 amet auctor elit quam id tellus.
 Nullam sollicitudin.
 Donec hendrerit.
 Aliquam ac nibh.
 Vivamus mi.
 Sed felis.
 Proin pretium elit in neque.
 Pellentesque at turpis.
 Maecenas convallis.
 Vestibulum id lectus.
 
\end_layout

\begin_layout Description
\noindent

\size small
Keywords: klíčová slova (3 až 5) v angličtině
\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\size small

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{
\end_layout

\end_inset

Zadání práce
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{plain}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
setcounter{page}{3}
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

% nastavení číslování stránek
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Standard
\noindent

\size small
\begin_inset VSpace vfill
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

% nastavuje dynamické umístění následujícího textu do spodní části stránky
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\noindent

\size small
Prohlašuji, že jsem svou bakalářskou práci napsal(a) samostatně a výhradně
 s použitím citovaných pramenů.
 Souhlasím se zapůjčováním práce a jejím zveřejňováním.
\end_layout

\begin_layout Standard

\size small
\begin_inset VSpace bigskip
\end_inset


\size default

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent 
\end_layout

\end_inset


\size small
 V Praze dne 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\backslash
hspace{
\backslash
fill}
\end_layout

\end_inset

Jméno Příjmení + podpis
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

% doplňte patřičné datum, jméno a příjmení
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout

%%%   Výtisk pak na tomto míste nezapomeňte PODEPSAT!
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

%%%                                         *********
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\size small
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

% vkládá automaticky generovaný obsah dokumentu
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Motivation
\end_layout

\end_inset

Motivation
\end_layout

\begin_layout Standard
\begin_inset Marginal
status open

\begin_layout Plain Layout
todo: dopsat
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Algorithm
\end_layout

\end_inset

Algorithm
\begin_inset CommandInset label
LatexCommand label
name "chap:Algorithm"

\end_inset


\end_layout

\begin_layout Standard
The basis of the whole algorithm is shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Basis-of-whole"

\end_inset

 in the pseudocode.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The basis of whole algorithm
\begin_inset CommandInset label
LatexCommand label
name "alg:Basis-of-whole"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

map := configuration.getMap();
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

map := amplifyObstacles(map);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

nodes := mapToNodes(map);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

paths := createGuidingPaths(nodes);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

rrtPath := rrtPath(paths, map, nodes);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

lastState := getBestFitness(rrtPath, map);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

path := getPath(lastState);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

path = straightenCrossingTrajectories(path);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

path := resamplePath(path, map);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

path := optimizePathByDubins(path, map);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

savePath(path);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The configuration variable is instance of the Configuration class, which
 holds all configuration data, including a selected map.
 The map holds all Areas of Interest (AoI) and obstacles.
 All obstacles and AoIs are represented as rectangles now.
\end_layout

\begin_layout Standard
The purpose of the path finding is to find the shortest feasible paths,
 but real UAVs need to have some minimal distance to obstacles due to weather
 conditions, sensor errors and other aspects.
 To solve this issue, every obstacle is amplified before the whole path
 finding algorithm on line 2.
 This minimal distance to obstacles allows UAVs to follow their trajectories
 safely.
\end_layout

\begin_layout Standard
The 3rd line represents the discretization of the map to the graph.
 The discretization divides the map to squares with size set in the configuratio
n and each square is represented by a graph node.
 In this graph, there are 4 types of nodes: Free, Obstacle, UAV and Goal.
 If the whole square or its part is covered by an obstacle, the corresponding
 node has the type Obstacle.
 If the whole square or its part is covered by an AoI, then the corresponding
 node has type Goal.
 If the square contains an UAV, the corresponding node has type UAV and
 rest of squares have corresponding nodes with type Free.
 
\end_layout

\begin_layout Standard
Edges in this graph are only between nodes of neighbouring squares, so each
 node has maximally 8 edges.
 Obstacle nodes do not have any edges.
\end_layout

\begin_layout Standard
After converting the map to nodes, the optional grouping of goals for guiding
 path can be enabled.
 I will cover the grouping in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Grouping-of-goals"

\end_inset

.
\end_layout

\begin_layout Standard
The 4th line represents the calculation of the guiding paths for RRT-Path
 algorithm using the A* algorithm with modified cost function.
 The modification will be covered in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Guiding-path"

\end_inset

.
\end_layout

\begin_layout Standard
On the 5th line the RRT-Path algorithm takes place.
 This function returns a structure with a tree with a root at the starting
 position of UAVs and with an array containing leaves of this three, where
 all UAVs are in Areas of Interest.
 
\end_layout

\begin_layout Standard
The leaf, where UAVs have the best coverage of AoI, is chosen on the 6th
 line.
 The quality of the coverage is determined by the cost function, which is
 described in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Areas-of-Interest"

\end_inset

.
\end_layout

\begin_layout Standard
On the 7th line the path is built from the last state.
\end_layout

\begin_layout Standard
On the 8th line there is an optional preparation before the optimization
 using Dubins curves.
 In the preparation, all crossings of paths of individual UAVs are straightened,
 so UAVs do not cross other trajectories during the whole path.
 Details are covered in the chapter
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Paths-straightening"

\end_inset

.
\end_layout

\begin_layout Standard
On the 9th line, the re-sampling of the path is made, mainly due to requirements
 of real UAVs, which are mentioned in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Path-resampling"

\end_inset

.
\end_layout

\begin_layout Standard
On the 10th line there is the optimization by Dubins curves.
 The optimization is covered in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Dubins-curves"

\end_inset

.
\end_layout

\begin_layout Standard
The last line represents persisting of the path to a file for usage of path
 by different programs.
 Path is persisted to JSON, due to convenience of the JSON format.
 JSON is smaller than XML and can be easily parsed by all widely used programmin
g languages.
 Path is also persisted to CSV format, so it can be loaded to MATLAB and
 then loaded into real UAVs.
\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
RRT-Path
\end_layout

\end_inset

RRT-Path
\end_layout

\begin_layout Standard
This chapter will cover brief introduction of RRT-Path algorithm.
 In first of all, we need to define RRT algorithm which RRT-Path is based
 on.
\end_layout

\begin_layout Section
Rapidly Exploring Random Tree
\end_layout

\begin_layout Standard
Rapidly Exploring Random Tree, also abbreviated as RRT, introduced by LaValle
\begin_inset CommandInset citation
LatexCommand cite
key "LaValle1998"

\end_inset

 in 1998, is non-deterministic algorithm for motion planning, used to search
 non-convex spaces by randomly building space-filling tree.
 The RRT method builds a tree 
\begin_inset Formula $T$
\end_inset

 rooted at 
\begin_inset Formula $q_{start}$
\end_inset

.
 The basic RRT algorithm works as follows.
 In each iteration, a random sample 
\begin_inset Formula $q_{rand}$
\end_inset

 is chosen from 
\begin_inset Formula $C$
\end_inset

 and the nearest node 
\begin_inset Formula $q_{near}$
\end_inset

 in the tree to 
\begin_inset Formula $q_{rand}$
\end_inset

 is found.
 The node 
\begin_inset Formula $q_{near}$
\end_inset

 is expanded using a local planner to obtain a set of new configurations
 reachable from 
\begin_inset Formula $q_{near}$
\end_inset

.
 The nearest configuration towards 
\begin_inset Formula $q_{rand}$
\end_inset

 is selected from this set and added to the tree.
 The edge from q near rand to the newly added configuration contains control
 inputs used by the local planner to reach the new configuration.
 The algorithm terminates if the distance between a node in the tree and
 
\begin_inset Formula $q_{goal}$
\end_inset

 is less than 
\begin_inset Formula $d_{goal}$
\end_inset

 or after 
\begin_inset Formula $I_{max}$
\end_inset

 of planning iterations.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Vonasek2015"

\end_inset

 The basis of RRT is listed in algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:RRT-algorithm"

\end_inset

.
 In RRT algorithm, configurations on the third line have uniform distribution.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
RRT algorithm
\begin_inset CommandInset label
LatexCommand label
name "alg:RRT-algorithm"

\end_inset

 source 
\begin_inset CommandInset citation
LatexCommand cite
key "Vonasek2015"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Input: 
\series default
Configurations 
\begin_inset Formula $q_{alert}$
\end_inset

 and 
\begin_inset Formula $q_{goal}$
\end_inset

, maximum number of iterations 
\begin_inset Formula $I_{max}$
\end_inset

, maximum distance to goal 
\begin_inset Formula $d_{goal}$
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
Output:
\series default
 Trajectory 
\begin_inset Formula $P$
\end_inset

 or failure
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset Formula $T.add\left(q_{start}\right);$
\end_inset

 // create new tree and add initial conguration q in it
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\series bold
for
\series default
 iteration:=1:I 
\series bold
do
\series default
 
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $q_{rand}$
\end_inset

 := getRandomConfiguration(
\begin_inset Formula $C$
\end_inset

);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $q_{near}$
\end_inset

 := nearest node in tree 
\begin_inset Formula $T$
\end_inset

 to q ;
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

expandTree(
\begin_inset Formula $q_{rand}$
\end_inset

,
\begin_inset Formula $q_{near}$
\end_inset

);
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $d$
\end_inset

 = distance from tree 
\begin_inset Formula $T$
\end_inset

 to 
\begin_inset Formula $q_{goal}$
\end_inset

 ;
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
if
\series default
 d < d 
\series bold
then
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

P = extract trajectory from 
\begin_inset Formula $q_{start}$
\end_inset

 to 
\begin_inset Formula $q_{rand}$
\end_inset

;
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

return P;
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\series bold
end
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset


\series bold
end
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
STATE 
\end_layout

\end_inset

return failure; // no solution was found within K iterations start
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
RRT-Path
\end_layout

\begin_layout Standard
RRT-Path, introduced by Vonásek 
\begin_inset CommandInset citation
LatexCommand cite
key "Vonasek2015"

\end_inset

 in 2015, is an improved version of RRT featuring preprocessing of configuration
 space.
 RRT-Path enables UAVs to manoeuvre around obstacles and find way in narrow
 passages.
 RRT.
 Path also finds goal much faster 
\begin_inset CommandInset citation
LatexCommand cite
key "petrlik2015"

\end_inset

.
 RRT-Path uses the guiding path during building the space-filling tree.
 Before running RRT algorithm, the guiding path from 
\begin_inset Formula $q_{start}$
\end_inset

 to 
\begin_inset Formula $q_{goal}$
\end_inset

 is found and sampled.
 One of inputs to RRT-Path algorithm is the probability 
\begin_inset Formula $p\left(guided\right)$
\end_inset

.
 In the main loop of the algorithm, obtaining of the random configuration
 is modified.
 Instead of random configuration with uniform distribution, configuration
 around the 
\begin_inset Formula $q_{i}$
\end_inset

is selected with probability 
\begin_inset Formula $p\left(guided\right)$
\end_inset

.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $G$
\end_inset

 be the guiding path and 
\begin_inset Formula $\left(q_{start},q_{1},q_{2},...,q_{goal}\right)\text{∈}G$
\end_inset

 the points of the guiding path, where 
\begin_inset Formula $q_{i}\text{∈}C_{free}$
\end_inset

.
 In the beginning, 
\begin_inset Formula $q_{i}=q_{1}$
\end_inset

, so random point is selected from area around the point 
\begin_inset Formula $q_{1}$
\end_inset

 with probability 
\begin_inset Formula $p\left(guided\right)$
\end_inset

.
 When the leaves of the searching tree reach distance lower than 
\begin_inset Formula $r_{dist}$
\end_inset

to the 
\begin_inset Formula $q_{i}$
\end_inset

, then the next point of the guiding path will be used instead of 
\begin_inset Formula $q_{i}$
\end_inset

, so 
\begin_inset Formula $q_{i}:=q_{i+1}$
\end_inset

.
 This continues until 
\begin_inset Formula $q_{goal}$
\end_inset

 is reached, which means the RRT-Path algorithm ends.
\end_layout

\begin_layout Section
Guiding path
\begin_inset CommandInset label
LatexCommand label
name "sec:Guiding-path"

\end_inset


\end_layout

\begin_layout Standard
The guiding path is obtained by transferring the map to graph representation
 and then path is found using the graph-search algorithms.
 The map can be transferred to graph representation by using the Voronoi
 diagram, visibility graph or by discretization to a grid representation.
 
\end_layout

\begin_layout Standard
Then the path can be found by using Dijkstra algorithm or A* algorithm.
 In this thesis, the A* algorithm has been used because of its ability to
 find optimal path and easy calculation of heuristic function is Euclidean
 space.
\end_layout

\begin_layout Standard
The classic cost function of node 
\begin_inset Formula $q_{i}$
\end_inset

 in A* algorithm is 
\begin_inset Formula $f\left(q_{i}\right)=g\left(q_{i}\right)+h\left(q_{i}\right)$
\end_inset

.
 The 
\begin_inset Formula $g\left(q_{i}\right)$
\end_inset

 is sum of costs of all edges in shortest path between nodes and 
\begin_inset Formula $q_{init}$
\end_inset

 and 
\begin_inset Formula $q_{i}$
\end_inset

.
 The 
\begin_inset Formula $h\left(q_{i}\right)$
\end_inset

 is heuristic estimate of distance between 
\begin_inset Formula $q_{i}$
\end_inset

 and 
\begin_inset Formula $q_{goal}$
\end_inset

.
 In Euclidean space, it is calculated as 
\begin_inset Formula $h\left(q_{i}\right)=\left\Vert q_{i}-q_{goal}\right\Vert $
\end_inset

.
 This algorithm uses a modified cost function and in addition to a cost
 function of the A* algorithm.
 The modified cost function is 
\begin_inset Formula $f\left(q_{i}\right)=g\left(q_{i}\right)+h\left(q_{i}\right)+j\left(q_{i}\right)$
\end_inset

, where 
\begin_inset Formula $j\left(q_{i}\right)$
\end_inset

 is number representing the nearness to the nearest obstacle.
 For example, it can be 
\begin_inset Formula $j\left(q_{i}\right)=\frac{const}{\left\Vert q_{i}-nearest\,obstacle\right\Vert }$
\end_inset

, where 
\begin_inset Formula $const$
\end_inset

 is weight of the 
\begin_inset Formula $j\left(q_{i}\right)$
\end_inset

 and expresses how much obstacles should be avoided with respect to length
 of the whole path.
\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Grouping of goals for the guiding path
\end_layout

\end_inset

 Grouping of goals for the guiding path 
\begin_inset CommandInset label
LatexCommand label
name "chap:Grouping-of-goals"

\end_inset


\end_layout

\begin_layout Standard
During this processing of the map (method MapProcessor::getEndNodes in codebase)
 all AoIs are grouped to one big AoI, which is the smallest rectangle covering
 all AoIs.
 
\end_layout

\begin_layout Standard
If this modification is enabled, only one goal is used for all AoIs instead
 of one goal for every AoI (node in the middle of AoI rectangle is considered
 to be the goal node).
 The whole swarm has only one guiding path, so the grouping prevents swarm
 from splitting.
 The relative localization is the main reason to have only one big swarm
 instead of more smaller swarms (or individual UAVs in case of the same
 count of AoI and UAVs).
 Advantages of relative localization are more significant when we have only
 one big swarm.
\end_layout

\begin_layout Standard
Grouping of goals is done by finding the smallest rectangle containing all
 AoIs.
 Middle of this big rectangle is considered to be middle of the group of
 goals.
 When obstacle is in the middle, nearest node which is not obstacle is used
 as middle of goals group.
 The middle is used as target for guiding path.
 
\end_layout

\begin_layout Standard
This approach has the following advantage: when individual AoIs are near
 to a global goal of the whole group, as seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Maps-with-goals"

\end_inset

, then the whole swarm follows one guiding path without any splitting, which
 makes the RRT-Path run faster and also the advantage of relative localization
 is included.
 
\end_layout

\begin_layout Standard
Maps with goals and obstacles are shown in figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Map-with-goals"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Maps-with-goals"

\end_inset

.
 Goals are coloured green colour and obstacles grey.
\end_layout

\begin_layout Standard
The disadvantage of this method appears when individual AoIs have a bigger
 distance from each other than can be covered by UAVs.
 Then this approach totally fails, because RRT-Path, which is much faster
 than RRT, has goal very distant from AoIs, as can be seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Map-with-goals"

\end_inset

 and main part of the path is found by RRT algorithm, which is slower.
\end_layout

\begin_layout Standard
Because of advantages of having only one swarm, all experiments in this
 thesis use grouping and all UAVs form one big swarm.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/map1.png
	lyxscale 50
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Map with goals unsuitable for grouping 
\begin_inset CommandInset label
LatexCommand label
name "fig:Map-with-goals"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/map2.png
	lyxscale 50
	scale 30

\end_inset


\begin_inset Graphics
	filename obrazky/map5.png
	lyxscale 50
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Maps with goals suitable for grouping 
\begin_inset CommandInset label
LatexCommand label
name "fig:Maps-with-goals"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Areas of Interest coverage
\end_layout

\end_inset

Areas of Interest coverage 
\begin_inset CommandInset label
LatexCommand label
name "chap:Areas-of-Interest"

\end_inset


\end_layout

\begin_layout Standard
Covering Areas of Interest (AoIs) with UAVs is key part of task of autonomous
 or cooperative surveillance.
 In task of surveillance, UAVs view space below them by on-board camera,
 as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-area-viewed"

\end_inset

.
 AoIs and areas seen by UAVs are represented by rectangles in this thesis
 for simplicity and fast computation.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/uav-with-camera.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The area viewed by UAV on-board camera
\begin_inset CommandInset label
LatexCommand label
name "fig:The-area-viewed"

\end_inset

, source 
\begin_inset CommandInset citation
LatexCommand cite
key "petrlik2015"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Coverage of AoIs is optimization problem.
 This optimization problem can be solved by finding minimum of cost function.
 The value of cost function should objectively reflect the quality of coverage,
 the lower value should represent better coverage.
 In this thesis, cost function 
\begin_inset Formula $f\left(q_{i}\right)$
\end_inset

 represents quality of coverage in configuration 
\begin_inset Formula $q_{i}$
\end_inset

, where configuration 
\begin_inset Formula $q_{i}$
\end_inset

 is set of UAV positions.
 The cost function 
\begin_inset Formula $f$
\end_inset

 in this thesis measures size of AoIs not covered by UAVs, which is equivalent
 to information not seen by UAVs.
 That means if 
\begin_inset Formula $f\left(q_{1}\right)<f\left(q_{2}\right)$
\end_inset

 configuration 
\begin_inset Formula $q_{1}$
\end_inset

 covers bigger part of AoIs than configuration 
\begin_inset Formula $q_{2}$
\end_inset

.
 The world 
\begin_inset Formula $W=R^{2}$
\end_inset

 is discretized to square grid represented by matrix 
\begin_inset Formula $A\in R^{2}$
\end_inset

.
 One of parameters for coverage optimization is size of one square in grid
 
\begin_inset Formula $a\,\left[map\right]units$
\end_inset

.
 Element 
\begin_inset Formula $A_{j,k}$
\end_inset

 represents square with size 
\begin_inset Formula $a$
\end_inset

 and left lower corner with coordinates 
\begin_inset Formula $\left[j\cdot a,k\cdot a\right]$
\end_inset

.
 Before computing areas seen by UAVs, 
\begin_inset Formula $A_{j,k}$
\end_inset

=
\begin_inset Formula $A_{max}$
\end_inset

 if it contains AoI, and 
\begin_inset Formula $A_{j,k}=0$
\end_inset

 otherwise.
 
\begin_inset Formula $A_{max}=100$
\end_inset

 has been used in experiments, but the value is arbitrary.
 Then the 
\begin_inset Formula 
\[
A_{j,k}:=A_{j,k}\cdot l^{m}
\]

\end_inset

 formula is applied to every element of the world representing matrix 
\begin_inset Formula $A$
\end_inset

.
 Variable 
\begin_inset Formula $l$
\end_inset

 must be in range 
\begin_inset Formula $1>l>0$
\end_inset

 and represents amount of information not seen by UAV even if this UAV covers
 the element 
\begin_inset Formula $A_{j,k}$
\end_inset

.
 This is because quality of image obtained from on-board camera depends
 on many factors, such as time of day, weather conditions, flight altitude,
 camera chip resolution, lens parameters, stabilization, frame rate and
 so on.
 In this implementation, 
\begin_inset Formula $l=0.5$
\end_inset

, but if the flight altitude will be considered in the optimization algorithm,
 higher flight altitude would lead worse image recording, so 
\begin_inset Formula $l(flightAltitude_{1})>l\left(flightAltitude_{2}\right)$
\end_inset

 for 
\begin_inset Formula $flightAltitude_{1}>flightAltitude_{2}$
\end_inset

.
 Variable 
\begin_inset Formula $m\in N_{0}$
\end_inset

 represents number of UAVs seeing the area of element 
\begin_inset Formula $A_{j,k}$
\end_inset

.
 Example can be seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:AoI-matrix-with"

\end_inset

.
 AoI is marked with green colour and UAV is marked with blue colour.
 As we can see, parts of AoI not seen by an UAV have value 
\begin_inset Formula $A_{j,k}=A_{max}=100$
\end_inset

 and parts of AoI seen by UAV have value 
\begin_inset Formula $A_{j,k}=A_{max}\cdot l^{m}=100\cdot0.5^{1}=50$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/oneUAVcoverage.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
AoI matrix with one UAV
\begin_inset CommandInset label
LatexCommand label
name "fig:AoI-matrix-with"

\end_inset

, source 
\begin_inset CommandInset citation
LatexCommand cite
key "petrlik2015"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
When UAV arrives above any AoI, RRT-Path algorithm ends for this UAV and
 instead of it, RRT algorithm takes place.
 Random node for RRT algorithm is selected only from AoI beneath the UAV,
 not from whole world.
 When all UAVs arrive to their goal by RRT-Path algorithm, RRT algorithm
 is run and it runs until being stopped.
 After stopping, all states found by RRT algorithm where UAVs are above
 AoIs, are gathered and their coverage cost function is calculated.
 State with lowest cost function is used as result of the path finding algorithm
 and used as input for Dubins curves optimization.
\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Paths straightening
\end_layout

\end_inset

Paths straightening 
\begin_inset CommandInset label
LatexCommand label
name "chap:Paths-straightening"

\end_inset


\end_layout

\begin_layout Standard
In the RRT-Path algorithm, crossing paths between neighbouring states are
 checked, so no trajectories are crossing each other between the 
\begin_inset Formula $n$
\end_inset

-th state and the 
\begin_inset Formula $n+1$
\end_inset

-th state, but this does not solve the problem completely.
 In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Crossing-paths"

\end_inset

 trajectories found by RRT-Path algorithm are shown.
 Every colour marks one state in RRT-Path.
 As we can see, check in algorithm prevents from crossing path between neighbour
ing states, but crossing of paths in different times can not be easily prevented.
 We can see in image, that paths cross between points J (yellow), M (light
 green) and H (orange), K (yellow), so there is no easy approach to prevent
 path collisions between 
\begin_inset Formula $n-2$
\end_inset

-th state and 
\begin_inset Formula $n$
\end_inset

-th state.
 Optimization by Dubins curves shortens trajectory of UAVs, so UAVs could
 be in these trajectories in different time.
 Considering that, there could be collisions after optimization.
 Another complication occurs, when time difference between two states is
 too low, then UAVs could collide, because in reality UAV can not follow
 path precisely, but only with some errors.
\begin_inset Marginal
status open

\begin_layout Plain Layout
todo: větší písmena u obrázku
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Crossing paths 
\begin_inset CommandInset label
LatexCommand label
name "fig:Crossing-paths"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/crossingPathReal1.png
	lyxscale 40
	scale 30

\end_inset


\end_layout

\end_inset

There were attempts to straighten crossing trajectories, but all of them
 failed.
 Straightening was done by switching parts of crossing paths from the earliest
 crossing state to the end.
 But then lengths of paths differed, which was unsuitable for path planning
 for swarm.
 This can be done by adding 
\begin_inset Quotes eld
\end_inset

waiting
\begin_inset Quotes erd
\end_inset

 points, points in different state but with the same position in different
 time.
 Due to these facts, it was really complicated to straighten longer path
 with many crossings (this path is really short, paths in other maps are
 much longer and more complicated).
 Motion model with inertia is unable to stop immediately in one place, so
 path waiting states is hard to follow precisely.
 This fact complicates following the straightened trajectories.
 Due to all complications mentioned above, this part was removed from algorithm.
 But it is possible to add it, when better approach will be found.
 
\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
UAV swarm properties
\end_layout

\end_inset

UAV swarm properties
\end_layout

\begin_layout Section
Motion model
\end_layout

\begin_layout Standard
The RRT-Path algorithm is universal and works with any motion model, which
 is fine for holonomic robot, but usage of non-holonomic motion model allows
 us to find path more feasible for swarm of UAVs.
 For this purpose, car like model was chosen.
 Car like model is very fast to compute and can be computed analytically.
 Differential equations of motion model in 3D from 
\begin_inset CommandInset citation
LatexCommand cite
key "MartinSaskaPreucil"

\end_inset

 are 
\begin_inset Formula 
\begin{equation}
\begin{array}{ccc}
\dot{x}\left(t\right) & = & v\left(t\right)\sin\varphi\left(t\right)\\
\dot{y}\left(t\right) & = & v\left(t\right)\cos\left(t\right)\\
\dot{z}\left(t\right) & = & w\left(t\right)\\
\dot{\varphi}\left(t\right) & = & K\left(t\right)v\left(t\right)
\end{array}
\end{equation}

\end_inset

where 
\begin_inset Formula $x\left(t\right),y\left(t\right),z\left(t\right)$
\end_inset

 are coordinates of UAV, 
\begin_inset Formula $\varphi\left(t\right)$
\end_inset

 represents heading of UAV, 
\begin_inset Formula $v\left(t\right)$
\end_inset

 is forward velocity, 
\begin_inset Formula $K\left(t\right)$
\end_inset

 is curvature, 
\begin_inset Formula $w\left(t\right)$
\end_inset

 is ascent velocity.
 Vector 
\begin_inset Formula $\begin{bmatrix}K\left(t\right) & w\left(t\right) & v\left(t\right)\end{bmatrix}$
\end_inset

 represent the input vector of motion model.
 Differential equations are readable and useful for representation in equations,
 but not they are so useful for computer algorithm due to time consumption.
 Difference equations are better for usage in algorithm instead of differential
 equations because they are much faster and scalable.
 When inputs are held constant in each time interval between two time steps,
 difference equations are 
\begin_inset Formula 
\begin{equation}
\begin{array}{ccc}
x\left(k+1\right) & = & \begin{cases}
if\,K\left(k+1\right)\neq0\\
x\left(k\right)+\frac{1}{K\left(k+1\right)}\left(\sin\left(\varphi\left(k\right)+K\left(k+1\right)v\left(k+1\right)\Delta t\left(k+1\right)\right)-\sin\left(\varphi\left(k\right)\right)\right)\\
if\,K\left(k+1\right)=0\\
x\left(k\right)+v\left(k+1\right)\cos\left(\varphi\left(k\right)\right)\Delta t\left(k+1\right)
\end{cases}\\
y\left(k+1\right) & = & \begin{cases}
if\,K\left(k+1\right)\neq0\\
y\left(k\right)-\frac{1}{K\left(k+1\right)}\left(\cos\left(\varphi\left(k\right)+K\left(k+1\right)v\left(k+1\right)\Delta t\left(k+1\right)\right)-\cos\left(\varphi\left(k\right)\right)\right)\\
if\,K\left(k+1\right)=0\\
y\left(k\right)+v\left(k+1\right)\sin\left(\varphi\left(k\right)\right)\Delta t\left(k+1\right)
\end{cases}\\
z\left(k+1\right) & = & z\left(k\right)+w\left(k+1\right)\Delta t\left(k+1\right)\\
\varphi\left(k+1\right) & = & \varphi\left(k\right)+K\left(k+1\right)v\left(k+1\right)\Delta t\left(k+1\right)
\end{array}
\end{equation}

\end_inset


\begin_inset Marginal
status open

\begin_layout Plain Layout
todo: otočit u vzorců podmínky, aby byly v podobě něco if něco, jiné else.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Relative localization
\begin_inset CommandInset label
LatexCommand label
name "sec:Relative-localization"

\end_inset


\end_layout

\begin_layout Standard
When swarm consists of only one UAV, no relative localization is needed.
 But when more UAVS are in swarm, every UAV has to be aware of its neighbours
 in order to remain together in one swarm.
 In this thesis, relative localization is implemented by setting the minimal
 distance 
\begin_inset Formula $d_{min}$
\end_inset

 and maximal distance 
\begin_inset Formula $d_{max}$
\end_inset

.
 The minimal distance is set because UAV push air beneath them when they
 fly.
 UAVs in the Multi-Robot Systems group at CTU have weight around 3 kg, which
 means 3 kg of air needs to be pushed below UAV in order to keep it flying.
 Because of this, UAVs can not fly too close to each other because of air
 currents they produce.
 The minimal distance is minimal distance in which UAVs do not affect each
 other by air currents.
 In last measurements, the minimal distance was 2 meters.
 The maximal distance needs to be set because of sensors range.
 UAVs in the Multi-Robot Systems group at CTU use on-board camera based
 localization system, published in 
\begin_inset Marginal
status open

\begin_layout Plain Layout
todo: odkaz na icra2013
\end_layout

\end_inset

.
 Sensors have maximal range and UAVs in bigger distance than this maximal
 range can not be seen.
 In experiments, the maximal distance was 5 meters.
 
\end_layout

\begin_layout Standard
In configuration of whole algorithm, number of neighbours 
\begin_inset Formula $n$
\end_inset

 is set.
 Every UAV must have 
\begin_inset Formula $n$
\end_inset

 or more neighbours in distance 
\begin_inset Formula $d$
\end_inset

, where 
\begin_inset Formula $d_{min}<d<d_{max}$
\end_inset

 in every step of configuration.
 Default setting is 
\begin_inset Formula $n=2$
\end_inset

.
 Computation of this relative localization is fast, but unusable for more
 than 5 UAVs.
 Swarm of 6 or more UAVs can split to 2 or more groups and still fit this
 relative localization constraint.
 The only solution to check whether all UAVs are in same swarm can be obtained
 by using following algorithm, which consists of two steps and uses graph
 representation.
 Every UAV is node and every pair of UAVs with distance 
\begin_inset Formula $d$
\end_inset

, where 
\begin_inset Formula $d_{min}<d<d_{max}$
\end_inset

 are connected by an edge.
 If the graph has only one connected component, all UAVs are in one swarm.
 Otherwise, the graph has more connected components, which implies UAVs
 are split into more swarms.
\end_layout

\begin_layout Standard
In the first step, the adjacency matrix 
\begin_inset Formula $A$
\end_inset

 is built.
 Each UAV represents one column and one row in this matrix.
 The adjacency matrix 
\begin_inset Formula $A$
\end_inset

 is built by following pattern.
\begin_inset Formula 
\[
A_{i,j}=\begin{cases}
1 & if\,d_{min}<d_{i,j}<d_{max}\\
0 & otherwise
\end{cases}
\]

\end_inset

where 
\begin_inset Formula $i,j$
\end_inset

 are indices of matrix A and 
\begin_inset Formula $d_{i,j}$
\end_inset

is distance between 
\begin_inset Formula $i$
\end_inset

-th and 
\begin_inset Formula $j$
\end_inset

-th UAV.
 In the second step, the graph represented by 
\begin_inset Formula $A$
\end_inset

 is traversed by depth-first algorithm, starting at 
\begin_inset Formula $A_{1,1}$
\end_inset

.
 When all nodes are visited during the traversing, the graph has only one
 connected component and all UAVs are in one swarm.
 In configuration can be set whether swarm splitting is enabled or not.
\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Dubins curves
\end_layout

\end_inset

Dubins curves
\begin_inset CommandInset label
LatexCommand label
name "chap:Dubins-curves"

\end_inset


\end_layout

\begin_layout Standard
Dubins curves, also called Dubins manoeuvrers or Dubins path were published
 by Lester Eli Dubins in 1957 
\begin_inset CommandInset citation
LatexCommand cite
key "Dubins1957"

\end_inset

.
 Dubins path is optimal path for car like motion model.
 Path is optimal, when car moves at constant forward speed.
 The other important constraint is the maximum steering angle 
\begin_inset Formula $\phi_{max}$
\end_inset

, which results in a minimum turning radius
\begin_inset Formula $\rho_{min}$
\end_inset

.
 As the car travels, consider the length of the curve in 
\begin_inset Formula ${\cal W}=\mathbb{R}^{2}$
\end_inset

 traced out by a pencil attached to the centre of the car.
 The task is to minimize the length of this curve as the car travels between
 any 
\begin_inset Formula $q_{I}$
\end_inset

 and 
\begin_inset Formula $q_{G}$
\end_inset

.
 Due to 
\begin_inset Formula $\rho_{min}$
\end_inset

, this can be considered as a bounded-curvature shortest-path problem.
 If 
\begin_inset Formula $\rho_{min}=0$
\end_inset

, then there is no curvature bound, and the shortest path follows a straight
 line in 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

.
 In terms of a cost function, the criterion to optimize is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\ensuremath{{\displaystyle L(\tilde{q},\tilde{u})=\int_{0}^{t_{F}}\sqrt{\dot{x}(t)^{2}+\dot{y}(t)^{2}}dt}}
\end{equation}

\end_inset

, where 
\begin_inset Formula $t_{F}$
\end_inset

 is the time at which 
\begin_inset Formula $q_{G}$
\end_inset

 is reached, and a configuration is denoted as 
\begin_inset Formula $q=(x,y,\theta)$
\end_inset

, 
\begin_inset Formula $\tilde{x}_{t}$
\end_inset

 denotes the function 
\begin_inset Formula $\tilde{x}_{t}:[0,t]\rightarrow X$
\end_inset

, which is called the state trajectory (or state history).
 This is a continuous-time version of the state history, which was defined
 previously for problems that have discrete stages.
 Similarly, 
\begin_inset Formula $\tilde{u}_{t}$
\end_inset

 denotes the action trajectory (or action history),.
 If 
\begin_inset Formula $q_{G}$
\end_inset

 is not reached, then it is assumed that 
\begin_inset Formula $L(\tilde{q},\tilde{u})=\infty$
\end_inset

.
 
\begin_inset CommandInset citation
LatexCommand cite
key "LaValle2006"

\end_inset


\end_layout

\begin_layout Standard
When considering constraints of inputs (actions) for motion model, the system
 can be simplified to
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{ccc}
\dot{x} & = & \cos\theta\\
\dot{y} & = & \sin\theta\\
\dot{\theta} & = & u
\end{array}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
in which 
\begin_inset Formula $u$
\end_inset

 is chosen from the interval 
\begin_inset Formula $U=\left\{ -\tan\phi_{max},0,\tan\phi_{max}\right\} $
\end_inset

.
 For simplicity, assume that 
\begin_inset Formula $\tan\phi=1$
\end_inset

.
 The following results also hold for any 
\begin_inset Formula $\phi_{max}\in(0,\pi/2)$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The three motion primitives from which all optimal curves for the Dubins
 car can be constructed.
 
\begin_inset CommandInset label
LatexCommand label
name "tab:The-three-motion"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Steering u
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It was shown in 
\begin_inset CommandInset citation
LatexCommand cite
key "Dubins1957"

\end_inset

 that between any two configurations, the shortest path for the Dubins car
 can always be expressed as a combination of no more than three motion primitive
s.
 Each motion primitive applies a constant action over an interval of time.
 Furthermore, the only actions that are needed to traverse the shortest
 paths are 
\begin_inset Formula $u\in\{-1,0,1\}$
\end_inset

.
 The primitives and their associated symbols are shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:The-three-motion"

\end_inset

.
 The 
\begin_inset Formula $S$
\end_inset

 primitive drives the car straight ahead.
 The 
\begin_inset Formula $L$
\end_inset

 and 
\begin_inset Formula $R$
\end_inset

 primitives turn as sharply as possible to the left and right, respectively.
 Using these symbols, each possible kind of shortest path can be designated
 as a sequence of three symbols that corresponds to the order in which the
 primitives are applied.
 Let such a sequence be called a word .
 There is no need to have two consecutive primitives of the same kind because
 they can be merged into one.
 Under this observation, ten possible words of length three are possible.
 Dubins showed that only these six words are possibly optimal:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\ensuremath{{\displaystyle \{LRL,\;RLR,\;LSL,\;LSR,\;RSL,\;RSR\}.}}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The shortest path between any two configurations can always be characterized
 by one of these words.
 These are called the Dubins curves.
\end_layout

\begin_layout Section
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Optimization using Dubins curves
\end_layout

\end_inset

Optimization using Dubins curves
\end_layout

\begin_layout Standard
Because of the fact that Dubins curves provide us optimal trajectory, they
 can be used to optimize trajectory found with RRT-Path algorithm.
\end_layout

\begin_layout Standard
For only one UAV, the situation is quite simple and optimization works as
 follows.
\end_layout

\begin_layout Standard
Two random points of trajectory are chosen and Dubins curves are calculated
 between them.
 If calculated curves do not collide with the obstacles, they are used instead
 of original trajectory between chosen points.
 This points choosing and trajectory replacing is repeated until the whole
 trajectory can not be shortened more and thus is optimal.
\end_layout

\begin_layout Standard
In real situation, we do not know whether found trajectory is optimal or
 not, so we need to determine conditions for stopping the optimization.
 The optimization is stopped if the trajectory is not shortened after many
 (e.
 g.
 150) iterations or optimization is too slow and path is shortened only
 by small distances (e.
 g.
 shortening by 5% per 1000 iterations).
 
\end_layout

\begin_layout Standard
But in swarm, the situation is complicated because of relative localization
 and minimal and maximal distances between individual UAVs.
 
\end_layout

\begin_layout Standard
So the algorithm must be modified.
 Dubins curves must be sampled in same frequency as rest of trajectory (this
 is frequency of RRT-Path algorithm or higher frequency when path is being
 re-sampled) and each point has to be validated for feasibility in terms
 of minimal and maximal distance from another UAVs.
 So the curves can be used only when all trajectories between minimal and
 maximal distance of relative localization.
\end_layout

\begin_layout Standard
Due to using random points during optimization, the optimization is stochastic
 and non-deterministic.
\end_layout

\begin_layout Subsection
\begin_inset Argument 1
status open

\begin_layout Plain Layout
One UAV demonstration
\end_layout

\end_inset

One UAV demonstration
\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:One-UAV-before"

\end_inset

 we have trajectory of one UAV found by RRT-Path algorithm in map with one
 obstacle marked by dark grey rectangle.
 Obstacle amplification is marked by light grey rectangle.
 In 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:One-UAV-after"

\end_inset

 we can see optimal path found using Dubins curves.
 The resulting path consists of many Dubins curves and it was obtained by
 algorithm mentioned above.
 Random points have been replaced by Dubins curves and after many iterations,
 optimal path was found.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
One UAV before Dubins curves optimization
\begin_inset CommandInset label
LatexCommand label
name "fig:One-UAV-before"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/oneUAV.json.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
One UAV after Dubins curves optimization
\begin_inset CommandInset label
LatexCommand label
name "fig:One-UAV-after"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/oneUAVoptimized.json.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Path re-sampling
\end_layout

\end_inset

Path re-sampling
\begin_inset CommandInset label
LatexCommand label
name "chap:Path-resampling"

\end_inset


\end_layout

\begin_layout Standard
Motion model in RRT-Path algorithm uses constant input in range from 0.5
 to 1 second.
 Smaller interval for constant input causes RRT-Path algorithm to run for
 too long.
 When using too short constant input interval, the tree has too many nodes,
 grows slowly and runs out of memory much faster than longer interval.
 Interval longer than 1 second makes UAVs unable to manoeuvre between smaller
 obstacles.
 Thus range from 0.5 to 1 second was experimentally chosen as best interval.
 Using 
\begin_inset Formula $x$
\end_inset

 seconds long constant input interval also means 
\begin_inset Formula $\frac{1}{x}Hz$
\end_inset

 frequency of points in resulting trajectory in output of the algorithm.
 So the range from 0.5 to 1 second implies resulting frequency is in range
 1Hz to 2Hz.
 
\end_layout

\begin_layout Standard
Real UAVs in Multi-Robot Systems group at CTU use frequency 70Hz for providing
 target points to UAVs and trajectories with lower frequency are linear
 interpolated to have frequency 70Hz.
 That means frequency 2Hz is too low for real usage because trajectory generated
 with this frequency would not be smooth enough.
 
\end_layout

\begin_layout Standard
Change of frequency before the RRT-Path algorithm makes the algorithm unable
 to run efficiently in bigger maps, so this approach does not solve the
 problem.
\end_layout

\begin_layout Standard
Another solution is to re-sample the path after Dubins curves.
 But this method failed because after Dubins optimization, the curves had
 different length and different constant input durations.
 
\end_layout

\begin_layout Standard
The best solution for this problem is re-sampling of trajectory generated
 by RRT-Path algorithm before it is optimized by Dubins curves.
 This solution also has big advantage in Dubins curves optimization because
 it results to shorter final path as will be shown in following experiment.
\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Covering more AoIs with one swarm
\end_layout

\end_inset

Covering more AoIs with one swarm
\end_layout

\begin_layout Standard
Some maps have distribution of obstacles and AoIs where algorithm stated
 above fails.
 These maps can be seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Failed-maps"

\end_inset

.
 Standard algorithm which uses only one guiding path always leads swarm
 to only one Area of Interest and the second area remains completely uncovered.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/standard-map9.png
	lyxscale 50
	scale 30

\end_inset


\begin_inset Graphics
	filename obrazky/standard-map10.png
	lyxscale 50
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Maps with only one covered Area of Interest
\begin_inset CommandInset label
LatexCommand label
name "fig:Failed-maps"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In case of using relative localization where every UAV needs only 1 to 2
 neighbours, UAVs can create chain and reach to more distant targets or
 targets divided by obstacles which UAVs can not reach when moving as one
 swarm using standard RRT-Path algorithm.
\end_layout

\begin_layout Standard
Following modifications must be done if we want to cover all AoIs in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Failed-maps"

\end_inset

.
\end_layout

\begin_layout Standard
UAVs are split to two groups, and every group has its own guiding path to
 one AoI.
 Relative localization keeps all UAVs in one swarm by its constraints described
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Relative-localization"

\end_inset

.
 With this setting, the swarm behaves like chain, because it is 
\begin_inset Quotes eld
\end_inset

pulled
\begin_inset Quotes erd
\end_inset

 to opposite sides by different guiding paths, but it is also connected
 by relative localization, so it does not split into more smaller swarms.
 Successful coverage by using the chain behaviour can be seen in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Maps-with-successful"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/chain-map9.png
	lyxscale 50
	scale 30

\end_inset


\begin_inset Graphics
	filename obrazky/chan-map10.png
	lyxscale 50
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Maps with successful chaining behaviour 
\begin_inset CommandInset label
LatexCommand label
name "fig:Maps-with-successful"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unfortunately, this approach does not work in all maps, and tends to end
 in local minimum in many cases, as can be seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Maps-with-unsuccessful"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Maps with unsuccessful chaining behaviour 
\begin_inset CommandInset label
LatexCommand label
name "fig:Maps-with-unsuccessful"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
V-REP simulations
\end_layout

\end_inset

V-REP simulations
\end_layout

\begin_layout Standard
V-REP is acronym for Virtual robot experimentation platform, a simulator
 developed by Coppelia Robotics, providing an advanced environment for testing
 and simulations of robots of all types.
 The V-REP environment is free and open-souce for educational purposes and
 also has commercial licence.
 The environment takes in account certain physical laws like gravity, inertia
 or friction, which enables to truthfully verify applicability for deployment
 of UAVs in the real world.
 V-REP has many build-in models, but user can also create his own robot.
 V-REP enables to control robots over API and has API clients for C, C++,
 Python, Java, Lua, Matlab, Octave and Urbi.
 
\end_layout

\begin_layout Section
UAV control and path simulation
\end_layout

\begin_layout Standard
Python is convenient for fast prototyping and has native functions for easy
 JSON parsing, which made it good choice for simulations of generated trajectori
es in V-REP.
\end_layout

\begin_layout Standard
UAVs in V-REP can be controlled over remote API only by changing location
 of their target.
 Then UAV tries to reach the location of its target.
 Unfortunately, UAVs only follow location, with speed proportional to distance.
 UAVs do not try to reach target and simultaneously to have zero speed when
 reaching their target, which causes overshoot.
 This fact leads to another disadvantage of UAV controller.
 When keeping target in same distance and direction from UAV, the UAV increases
 its speed, which causes overshoot when target changes its direction to
 UAV.
 These overshoots were many times bigger than size of UAVs, so they could
 not be ignored and had to be fixed.
\end_layout

\begin_layout Standard
During first, naive implementation, position of next state was set as target
 position for UAV, but due to overshoot and large distances between states
 UAVs failed to follow the trajectory.
 
\end_layout

\begin_layout Standard
Another implementation linear interpolated trajectory between UAV and its
 next state position and calculated target placed in line between UAV and
 next state position, but in constant distance to UAV.
\end_layout

\begin_layout Standard
So the calculation was defined as follows
\begin_inset Formula 
\[
\mathbf{X}\left(k+1\right)_{target}=\mathbf{X}\left(k\right)_{UAV}+\frac{\left(\mathbf{X}\left(k\right)_{ns}-\mathbf{X}\left(k\right)_{UAV}\right)}{\left\Vert \mathbf{X}\left(k\right)_{ns}-\mathbf{X}\left(k\right)_{UAV}\right\Vert }\cdot const
\]

\end_inset

where 
\begin_inset Formula $\mathbf{X}\left(k\right)_{UAV}$
\end_inset

 is UAV position in 
\begin_inset Formula $k$
\end_inset

-th iteration of simulation, 
\begin_inset Formula $\mathbf{X}\left(k\right)_{ns}$
\end_inset

 is position of next state in planned path in k-th iteration, 
\begin_inset Formula $\mathbf{X}\left(k+1\right)_{target}$
\end_inset

 is position of UAV target in 
\begin_inset Formula $k+1$
\end_inset

-th iteration and 
\begin_inset Formula $const$
\end_inset

 is constant experimentally tuned, so the UAV does not move too fast nor
 too slow.
 Too fast movements cause overshoot and too slow movements cause the simulation
 to run for needlessly long time.
\end_layout

\begin_layout Standard
But a mentioned earlier, even this approach did not go well.
 In long passages, where trajectory did not turn, UAVs increased their velocity
 and inertia, which made them harder to turn.
 The problem of overshooting is shown in figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Map-with-UAV"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:UAV-overshoot"

\end_inset

.
 Overshoot is on the end of long passage in map 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Map-with-UAV"

\end_inset

.
 Red and violet balls represent positions of next states and green balls
 represent UAV targets.
 In the first image, we can see UAVs leaving the narrow passage.
 As you can see in second and third image, positions of next state are still,
 but because of constant distance of target and UAV, the target is dragged
 by UAVs inertia.
\end_layout

\begin_layout Standard
This has been fixed by not updating the position of target when distance
 between UAV and next state is bigger than in previous iteration and the
 position of next state is still the same, so the equation describing target
 position is
\begin_inset Formula 
\[
\mathbf{X}\left(k+1\right)_{target}=\begin{cases}
if\left\Vert \mathbf{X}\left(k\right)_{ns}-\mathbf{X}\left(k\right)_{UAV}\right\Vert <\left\Vert \mathbf{X}\left(k-1\right)_{ns}-\mathbf{X}\left(k-1\right)_{UAV}\right\Vert \\
\land\mathbf{X}\left(k\right)_{ns}=\mathbf{X}\left(k-1\right)_{ns}\\
\mathbf{X}\left(k\right)_{UAV}+\frac{\left(\mathbf{X}\left(k\right)_{ns}-\mathbf{X}\left(k\right)_{UAV}\right)}{\left\Vert \mathbf{X}\left(k\right)_{ns}-\mathbf{X}\left(k\right)_{UAV}\right\Vert }\cdot const\\
else\\
\mathbf{X}\left(k\right)_{target}
\end{cases}
\]

\end_inset

.
 This prevents target from dragging by UAV with big inertia.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/mapWithPassage.png
	lyxscale 40
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Map with UAV overshoot 
\begin_inset CommandInset label
LatexCommand label
name "fig:Map-with-UAV"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/overshoot2.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/overshoot3_2.png
	lyxscale 52
	scale 52

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename obrazky/overshoot4.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
UAV overshoot
\begin_inset CommandInset label
LatexCommand label
name "fig:UAV-overshoot"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Here can be seen 3 iterations.
 Next state is changed during 
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Implementation
\end_layout

\end_inset

Implementation
\end_layout

\begin_layout Standard
This part will cover implementation of algorithm, which was used for simulations.
 Whole codebase in C++ can be found at 
\begin_inset CommandInset href
LatexCommand href
name "this github repository"
target "https://github.com/racinmat/AutonomousSurveillanceBachelorThesis"

\end_inset

.
 Next to the C++ program, I also created some CLI scripts in PHP, for drawing
 map and paths from the JSON representation, batch running of Dubins curves
 optimization and other useful stuff.
 These can be seen at 
\begin_inset CommandInset href
LatexCommand href
name "this github repository"
target "https://github.com/racinmat/UAVUtils"

\end_inset

.
 V-REP simulations were made by communicating with V-REP through remote
 API, the client is written in Python and can be seen 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "https://github.com/racinmat/VRepPathBuilder"

\end_inset

.
\end_layout

\begin_layout Section
External libraries
\end_layout

\begin_layout Standard
Some external libraries are used in the implementation.
 Every used library is mentioned here.
 
\begin_inset CommandInset href
LatexCommand href
name "Boost libraries"
target "http://www.boost.org/"

\end_inset

 are used for smart pointers, libraries for Dubins curves are from Master
 Thesis by Petr Váňa 
\begin_inset CommandInset citation
LatexCommand cite
key "Vana2015"

\end_inset

.
 Generating of JSON from C++ object is done via 
\begin_inset CommandInset href
LatexCommand href
name "Json Spirit"
target "http://www.codeproject.com/Articles/20027/JSON-Spirit-A-C-JSON-Parser-Generator-Implemented"

\end_inset

 library.
 Another external library is 
\begin_inset CommandInset href
LatexCommand href
name "V-Collide"
target "http://gamma.cs.unc.edu/V-COLLIDE/"

\end_inset

 from The University of North Carolina at Chapel Hill.
 
\end_layout

\begin_layout Standard
Because V-Collide sources were written in 1997 and because I used C++11
 compiler to compile my source codes, I had to rewrite part of this library
 for compatibility and to make public API easier to use.
 Modifications can be seen in 
\begin_inset CommandInset href
LatexCommand href
name "this github repository"
target "https://github.com/racinmat/VCollide2"

\end_inset

.
 
\end_layout

\begin_layout Standard
Last used external library is QT, which was used to create platform independent
 GUI.
\end_layout

\begin_layout Section
Code structure and services
\end_layout

\begin_layout Standard
Here is shown brief UML scheme demonstrating dependency diagram of codebase.
 To keep diagram simple, only services are displayed, other classes, which
 are not services, were left out for readability.
 Diagram was generated using software 
\begin_inset CommandInset href
LatexCommand href
name "StarUML"
target "http://staruml.io/"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Dependency diagram 
\begin_inset CommandInset label
LatexCommand label
name "fig:Dependency-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/umlSchema.svg
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Core class holds core of whole Application and has all other classes as
 dependencies, as is shown in image 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Dependency-diagram"

\end_inset

.
 
\end_layout

\begin_layout Standard
As mentioned in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Algorithm"

\end_inset

, Configuration is DTO for all configuration variables, but to keep reasonable
 amount of classes, Configuration is also service, which delegates all configura
tion changes from GUI to Core class.
 Configuration and GuiDrawer implementation LoggerInterface are the only
 connections between Core and GUI.
\end_layout

\begin_layout Standard
State factory creates State classes according to Factory pattern.
 State class represents state in RRT-Path algorithm.
 State has coordinates and rotations for all UAVs.
 Persister persists found path to JSON using Json Spirit library.
 PathHandler serves as utils class for manipulations with path (vector of
 State classes).
 CarLikeMotionModel holds motion model algorithm.
 InputGenerator is used to generate inputs to motion model.
 NTupletGenerator only generates variation with repeating for given input.
 DistanceResolver counts distances between two states and distance of path.
 AoICoverageResolver determines cost function for states,where all UAVs
 are in AoIs.
 GuidingPathFactory is wrapper for PathFindingAlgorithm interface and is
 used by Core to find guiding path.
 Implementation of PathFindingAlgorithm is AStart class.
\end_layout

\begin_layout Section
Utility scripts
\end_layout

\begin_layout Standard
All graphs in experiments with re-sampling and Dubins optimization were
 generated with usage of PHP scripts.
 Script runDubinsOptimization.php runs sequentially resampling with given
 frequencies multiple times.
 This script can be run many times at once with different configuration,
 which brings advantage of parallel run without need to deals with threads.
 Script processDubinsOptimizatinData.php merges all CSV result files to one
 big matrix, with number of rows equal to maximal number of iterations and
 number of columns equal number of runs of the optimization.
 For example, as seen in experiment 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:First-experiment"

\end_inset

 for frequency 1 Hz it is matrix with size 2095x100.
 This can be loaded directly to matlab so the graph can be generated.
 Script drawPaths.php generates map to png image.
 E.
 g.
 map generated by this script can be seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Path-before-Dubins"

\end_inset

.
\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Experiments
\end_layout

\end_inset

Experiments
\end_layout

\begin_layout Section
RRT-Path
\end_layout

\begin_layout Section
Influence of re-sampling on Dubins curves optimization
\end_layout

\begin_layout Standard
To demonstrate the optimization, few maps were selected to be used in re-samplin
g and optimization experiments.
 The RRT-Path algorithm found trajectories for UAVs.
 These trajectories were re-sampled and optimized 100 times to obtain relevant
 results because of using random numbers during the optimization and avoiding
 getting stuck in local optima.
\end_layout

\begin_layout Standard
Due to time and memory consumption, each optimization is stopped after 200
 iterations where optimization did not shorten the path or when speed of
 path shortening was slower than 5% of original path length per 1000 iterations.
\end_layout

\begin_layout Standard
The algorithm also stops when consumed memory exceeds 1900 MB.
 This is right before shutting of program by operating system, because 32bit
 processes are not allowed to use more than 2 GB of RAM.
 This feature was implemented using an ugly platform-dependent hack.
\end_layout

\begin_layout Standard
In next sections, maps with obstacles, AoIs and trajectories will be shown.
 Obstacles are grey rectangles, AoI is green rectangle and each UAV has
 trajectory marked with different colour.
 For measuring of influence of re-sampling of path to Dubins curves optimization
, following frequencies were selected: 1 Hz (initial frequency used in RRT-Path
 algorithm), 2 Hz, 4 Hz, 6 Hz, 8 Hz, 10 Hz, 12 Hz, 14 Hz, 16 Hz, 18 Hz,
 20 Hz.
\end_layout

\begin_layout Subsection
First experiment
\begin_inset CommandInset label
LatexCommand label
name "sub:First-experiment"

\end_inset


\end_layout

\begin_layout Standard
The map with trajectories found by the RRT-Path algorithm can be seen in
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Path-before-Dubins"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Path before Dubins curves optimization
\begin_inset CommandInset label
LatexCommand label
name "fig:Path-before-Dubins"

\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename obrazky/pathBeforeDubins.png
	lyxscale 40
	scale 28

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The best result of Dubins curves optimization (re-sampling of 20Hz) is shown
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Path-after-Dubins"

\end_inset

.
 As we can see, trajectories are much shorter than trajectories before optimizat
ion in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Path-before-Dubins"

\end_inset

.
 On the beginning of trajectories, in the left upper corner of picture,
 we can see much smoother curves than before optimization.
 This is due to re-sampling to frequency 20Hz, which smooths trajectories.
 
\end_layout

\begin_layout Standard
In real flight, it is undesirable to have trajectories tight to obstacles,
 so obstacles are amplified before optimization.
 This can be seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Path-after-Dubins"

\end_inset

 where UAVs keep certain distance from the obstacles.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Path after Dubins curves optimization
\begin_inset CommandInset label
LatexCommand label
name "fig:Path-after-Dubins"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/pathAfterDubins20Hz.png
	lyxscale 40
	scale 28

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Following table shows average total, minimal and maximal distance of all
 trajectories from 100 optimizations after the re-sampling and optimization.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Re-sampling and optimization results
\begin_inset CommandInset label
LatexCommand label
name "tab:Re-sampling-and-optimization"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frequency [Hz]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Minimal distance [m]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maximal distance [m]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Average distance [m]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8582.18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8849.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8721.2904
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8311.65
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8548.81
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8430.23
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8366.88
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8393.09
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8379.985
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8248.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8275.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8262.3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8249.88
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8378.51
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8314.195
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8286.22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8472.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8379.21
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8302.51
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8309.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8307.6613
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8303.18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8303.18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8303.18
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8363.92
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8363.92
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8363.92
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8510.32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8510.32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8510.32
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8194.22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8194.22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8194.22
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The results are also shown in graph 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Re-sampling-and-optimization"

\end_inset

.
 On the graph we can see that initial frequency 1 Hz has worst results and
 the frequency 20 Hz has best results.
 We can also see that in frequency 14 Hz and higher, all 100 iterations
 had same results, the minimum, maximum and mean value are the same.
 But the second best frequency in terms of minimal, maximal and mean value
 is 6 Hz and even the worst optimization in 6 Hz has smaller total distance
 than 8 to 18 Hz.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Re-sampling and optimization results graph 
\begin_inset CommandInset label
LatexCommand label
name "fig:Re-sampling-and-optimization"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/experiment1-frequencyDependence.png
	lyxscale 40
	scale 65

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Depending on re-sampling frequency, the courses of optimization are also
 different.
\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Time-course-of"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Time-course-of-1"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Time-course-of-2"

\end_inset

 we can see mean values and standard deviations for different frequencies,
 divided into three graphs for better readability.
 The vertical lines are error bars, they show standard deviation during
 the optimization.
 Because the error bars would be too dense if they were shown for each iteration
, only every 100th iteration is shown on graphs.
 For comparison, on each graph is shown also frequency 1 Hz, the initial
 frequency before re-sampling.
 As we can see, frequencies 14, 16, 18 and 20 Hz have almost zero standard
 deviation and converge to lower value than initial frequency.
 In frequency 10 Hz can be seen high standard deviation.
 That means the optimization got stuck in local optimum and was not able
 to shorten any path for many iterations.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Time course of optimization for 2 Hz, 4 Hz, 6 Hz
\begin_inset CommandInset label
LatexCommand label
name "fig:Time-course-of"

\end_inset

 
\end_layout

\end_inset


\begin_inset Graphics
	filename obrazky/experiment1-lowFrequenciesErrors.png
	lyxscale 40
	scale 65

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Time course of optimization for 8 Hz, 10 Hz, 12 Hz
\begin_inset CommandInset label
LatexCommand label
name "fig:Time-course-of-1"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/experiment1-middleFrequenciesErrors.png
	lyxscale 40
	scale 65

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Time course of optimization for 14 Hz, 16 Hz, 18 Hz, 20 Hz
\begin_inset CommandInset label
LatexCommand label
name "fig:Time-course-of-2"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/experiment1-highFrequenciesErrors.png
	lyxscale 40
	scale 65

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Second experiment
\begin_inset CommandInset label
LatexCommand label
name "sub:Second-experiment"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Path before Dubins curves optimization
\begin_inset CommandInset label
LatexCommand label
name "fig:Path-before-Dubins-1"

\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename obrazky/path-03-27-17-49-16-before-dubins.json.png
	lyxscale 40
	scale 28

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The best result of Dubins curves optimization (re-sampling of 4Hz) is shown
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Path-after-Dubins-1"

\end_inset

.
 As we can see, trajectories are much shorter than trajectories before optimizat
ion in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Path-before-Dubins-1"

\end_inset

, as in experiment 1, but curves in the upper part of figure still were
 not optimized.
 This was caused by optimization algorithm getting stuck in local optimum.
 The algorithm tried to optimize other parts and ended due to stopping condition
s mentioned above.
 Light grey colour represents obstacle amplification.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Path after Dubins curves optimization
\begin_inset CommandInset label
LatexCommand label
name "fig:Path-after-Dubins-1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/path-04-25-16-23-37-05-optimized.json.png
	lyxscale 40
	scale 28

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The results are shown in graph 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Re-sampling-and-optimization-1"

\end_inset

.
 On the graph can be seen interesting results.
 Contrary to the graph from experiment 1 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Re-sampling-and-optimization"

\end_inset

, all frequencies have same minimal distance, maximal distance and mean
 distance.
 This shows us interesting fact.
 For same frequency, all 100 runs got stuck in same local optimum, but every
 frequency has different local optimum where the algorithm can stuck.
 Trajectory in this experiment is much smaller, which leads to zero standard
 deviation and difference between minimal and maximal distance between optimizat
ion results in one frequency.
 The difference between maximal and minimal results is bigger when optimizing
 longer and more complicated trajectory.
 As we can also see from graphs, we can not predict optimal re-sampling
 frequency from trajectory.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Re-sampling and optimization results graph 
\begin_inset CommandInset label
LatexCommand label
name "fig:Re-sampling-and-optimization-1"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/experiment2-frequencyDependence.png
	lyxscale 40
	scale 65

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Depending on re-sampling frequency, the courses of optimization are also
 different.
\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Time-course-of-3"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Time-course-of-1-1"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Time-course-of-2-1"

\end_inset

 we can see mean values and standard deviations for different frequencies,
 divided into three graphs for better readability.
 The vertical lines are error bars, they show standard deviation during
 the optimization.
 Because the error bars would be too dense if they were shown for each iteration
, only every 10th iteration is shown on graphs.
 For comparison, on each graph is shown also frequency 1 Hz, the initial
 frequency before re-sampling.
 As we can see, in comparison to experiment 1, standard deviations are zero,
 so the optimization algorithm exhibits deterministic behaviour even if
 this optimization method is stochastic.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Time course of optimization for 2 Hz, 4 Hz, 6 Hz
\begin_inset CommandInset label
LatexCommand label
name "fig:Time-course-of-3"

\end_inset

 
\end_layout

\end_inset


\begin_inset Graphics
	filename obrazky/experiment2-lowFrequenciesErrors.png
	lyxscale 40
	scale 65

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Time course of optimization for 8 Hz, 10 Hz, 12 Hz
\begin_inset CommandInset label
LatexCommand label
name "fig:Time-course-of-1-1"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/experiment2-middleFrequenciesErrors.png
	lyxscale 40
	scale 65

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Time course of optimization for 14 Hz, 16 Hz, 18 Hz, 20 Hz
\begin_inset CommandInset label
LatexCommand label
name "fig:Time-course-of-2-1"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename obrazky/experiment2-highFrequenciesErrors.png
	lyxscale 40
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliography"
options "bibtotoc,plainnat"

\end_inset


\end_layout

\begin_layout Chapter
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Conclusion
\end_layout

\end_inset

Conclusion
\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\end_body
\end_document
